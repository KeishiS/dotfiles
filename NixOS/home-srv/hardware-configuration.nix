# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:
let
  boot_part = "/dev/disk/by-label/NIXOSBOOT";
  yubikey_slot = 1;
  key_length = 64;
  salt_length = 32;
  grace_period = 300;
in
{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  hardware = {
    cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
    graphics = {
      enable = true;
      extraPackages = with pkgs; [
        rocmPackages.clr.icd
      ];
    };
  };
  boot = {
    kernelModules = [
      "amdgpu"
      "kvm-amd"
      "v4l2loopback"
    ];
    extraModulePackages = with config.boot.kernelPackages; [
      v4l2loopback
    ];
    extraModprobeConfig = ''
      options v4l2loopback devices=1 video_nr=1 card_label="OBS Cam" exclusive_caps=1
    '';

    supportedFilesystems.btrfs = true;

    initrd = {
      availableKernelModules = [
        "nvme"
        "xhci_pci"
        "ahci"
        "usbhid"
        "usb_storage"
        "sd_mod"
      ];
      kernelModules = [
        "dm-snapshot"
        "vfat"
        "nls_cp437"
        "nls_iso8859-1"
        "nls_utf8"
        "usbhid"
      ];

      luks = {
        cryptoModules = [
          "aes"
          "xts"
          "sha512"
        ];
        yubikeySupport = true;

        devices."nixos-root-1" = {
          device = "/dev/disk/by-uuid/924e2503-68f4-47e3-8777-563b6a8163f5";
          preLVM = false;
          yubikey = {
            slot = yubikey_slot;
            twoFactor = true;
            gracePeriod = grace_period;
            keyLength = key_length;
            saltLength = salt_length;
            storage = {
              device = boot_part;
              fsType = "vfat";
              path = "/crypt-storage/default";
            };
          };
        };

        devices."nixos-root-2" = {
          device = "/dev/disk/by-uuid/7a912664-4a09-4115-a3c9-7f3a46103a44";
          preLVM = false;
          yubikey = {
            slot = yubikey_slot;
            twoFactor = true;
            gracePeriod = grace_period;
            keyLength = key_length;
            saltLength = salt_length;
            storage = {
              device = boot_part;
              fsType = "vfat";
              path = "/crypt-storage/default";
            };
          };
        };
      };
    };
  };

  fileSystems."/boot" = {
    device = boot_part;
    fsType = "vfat";
    options = [
      "fmask=0022"
      "dmask=0022"
    ];
  };

  fileSystems."/" = {
    device = "/dev/disk/by-label/btrfs-root";
    fsType = "btrfs";
    options = [ "subvol=root" ];
  };

  fileSystems."/data" = {
    device = "/dev/disk/by-label/btrfs-root";
    fsType = "btrfs";
    options = [ "subvol=data" ];
  };

  environment.etc."crypttab" = {
    mode = "0600";
    text = ''
      swap /dev/disk/by-label/crypt-swap /dev/urandom swap,cipher=aes-xts-plain64,size=256
    '';
  };

  swapDevices = [
    {
      device = "/dev/mapper/swap";
    }
  ];

  services.btrfs.autoScrub = {
    enable = true;
    fileSystems = [ "/" ];
  };

  services.xserver = {
    enable = true;
    videoDrivers = [ "amdgpu" ];
  };
  environment.systemPackages = with pkgs; [
    rocmPackages.rocminfo
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp9s0.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp8s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
}
